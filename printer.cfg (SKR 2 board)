# This file contains common pin mappings for the BigTreeTech SKR 2.
# To use this config, the firmware should be compiled for the
# STM32F407 with a "32KiB bootloader".

# In newer versions of this board shipped in late 2021 the STM32F429
# is used, if this is the case compile for this with a "32KiB bootloader"
# You will need to check the chip on your board to identify which you have.
#
# The "make flash" command does not work on the SKR 2. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR 2
# with that SD card.

# See docs/Config_Reference.md for a description of parameters.

# Note: The initial revision of this board has a flaw that can cause
# damage to itself and other boards. Be sure to verify the board is
# not impacted by this flaw before using it.

[include macros.cfg]
[include mainsail.cfg]
[include stealthburner_leds.cfg]
[include bed_mesh.cfg]


#[servo klicky_servo]
#check were your servo is wired
#pin: PE5
#maximum_servo_angle: 180
#minimum_pulse_width: 0.00025
#maximum_pulse_width: 0.0024

#[gcode_macro _servo_test_angle]
#gcode:
#	{% set ANGLE  = params.ANGLE|int %}
	
#    SET_SERVO SERVO=klicky_servo ANGLE={ANGLE}
#    G4 P250
#    SET_SERVO SERVO=klicky_servo WIDTH=0.0

# Chamber Lighting
[output_pin caselight]
pin: PB4
#max_power: 1.0
#kick_start_time: 0.5
pwm: true
shutdown_value: 0
value: 100
cycle_time: 0.001
scale: 100

# Lighting Control
[gcode_macro lights_off]
gcode:
    SET_PIN PIN=caselight VALUE=0
 
[gcode_macro lights_on]
gcode:
    SET_PIN PIN=caselight VALUE=100
 
[gcode_macro lights_toggle]
gcode:
    {% if printer["output_pin caselight"].value == 100 %}
        lights_off
    {% else %}
        lights_on
    {% endif %}

[input_shaper]
shaper_freq_x: 39
shaper_type_x: 2hump_ei 
shaper_freq_y: 43
shaper_type_y: mzv

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    117,117,20  	# Bed Center

[stepper_x]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PE3
microsteps: 32
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: 0
position_max: 245
homing_speed: 100

[tmc2209 stepper_x]
uart_pin: PE0
run_current: 0.900
#diag_pin:

[stepper_y]
step_pin: PD5
dir_pin: !PD4
enable_pin: !PD6
microsteps: 32
rotation_distance: 40
endstop_pin: ^PC3
position_endstop: 0
position_max: 235
homing_speed: 100


[tmc2209 stepper_y]
uart_pin: PD3
run_current: 0.900
#diag_pin:

[stepper_z]
step_pin: PA15
dir_pin: PA8
enable_pin: !PD1
microsteps: 16
rotation_distance: 8
endstop_pin: ^PC0
position_endstop: 0 	
position_min: -5 # The Z carriage may need to travel below the Z=0
position_max: 250

[tmc2209 stepper_z]
uart_pin: PD0
run_current: 0.75
#diag_pin:

[stepper_z1]
step_pin: PD11
dir_pin: PD10
enable_pin: !PD13
microsteps: 16
rotation_distance: 8

[tmc2209 stepper_z1]
uart_pin: PD12
run_current: 0.75
#diag_pin:

[extruder]
step_pin: PD15
dir_pin: PD14
enable_pin: !PC7
microsteps: 16
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB3
sensor_type: ATC Semitec 104GT-2
sensor_pin: PA2
#control: pid
#pid_Kp: 25.679
#pid_Ki: 1.600
#pid_Kd: 103.035
min_temp: 0
max_temp: 300
gear_ratio: 50:17
rotation_distance: 22.80675954816
pressure_advance = 0.068 #Try 0.085
max_extrude_cross_section: 50.0

[tmc2209 extruder]
uart_pin: PC6
run_current: 0.500
#diag_pin:



[heater_bed]
heater_pin: PD7
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA1
#control: pid #watermark
min_temp: 0
max_temp: 130

[fan]
#part cooling fan
pin: PB6

[heater_fan hotend_fan]
pin: PB5
shutdown_speed: 1

[heater_fan unused_fan2]
pin: PB7

# Due to BTT implementing a Marlin-specific safety feature,
# "anti-reversal stepper protection", this pin needs pulling
# high to pass power to stepper drivers and most FETs

[output_pin motor_power]
pin: PC13
value: 1

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f429xx_320052000E50334132383020-if00

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[bed_screws]
screw1: 54,44
screw2: 54,205
screw3: 224, 132

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[thermistor chamber_thermistor]
temperature1: 25
resistance1: 100000
beta: 3950

[temperature_sensor enclosure_temp]
sensor_type: chamber_thermistor
sensor_pin: PA3
min_temp: 0
max_temp: 80


[printer]
kinematics: cartesian
max_velocity: 500     #default 300
max_accel: 5000       #default 3000
max_z_velocity: 40
max_z_accel: 60
square_corner_velocity: 10
########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE10, EXP1_7=PE12, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE9, EXP1_6=PE11, EXP1_8=PE13, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.













[pause_resume]
recover_velocity: 50
#recover_velocity: 200
	# When capture/restore is enabled, the speed at which to return to
	# the captured position (in mm/s). Default is 50.0 mm/s. 
	# paste "unknownCommandsNeedAck: true" in ~/.octoprint/config.yaml
######################################
# #
# serial: #
# additionalPorts: #
# - /tmp/printer #
# baudrate: 250000 #
# disconnectOnErrors: false #
# logPositionOnCancel: true #
# port: /tmp/printer #
# unknownCommandsNeedAck: true #
# #
######################################
	# Filament Switch Sensor. Support for filament insert and runout detection
	# using a switch sensor, such as an endstop switch.
[filament_switch_sensor filament_sensor]
pause_on_runout: False
event_delay: 0.5
	# The minimum amount of time in seconds to delay between events.
	# Events triggered during this time period will be silently
	# ignored. The default is 3 seconds.
switch_pin: !PA4 	# ar2=RAMPS X+ / ar4=RAMPS Servo Pin 4
	# The pin on which the switch is connected. This parameter must be
	# provided.
	# When set to True, a PAUSE will execute immediately after a runout
	# is detected. Note that if pause_on_runout is False and the
	# runout_gcode is omitted then runout detection is disabled. 
	#Default is True.
runout_gcode:
    M600


	# The gcode to run after a filament runout is detected. If
	# pause_on_runout is set to True this gcode will run after the PAUSE
	# is complete. The default is not to run any gcode commands.
#insert_gcode: RESUME_MACRO
#event_delay: 


	# The gcode to run after a filament insert is detected. The default
	# is not to run any gcode commands, which disables insert detection.

	# Idle timeout. An idle timeout is automatically enabled - add an
	# explicit idle_timeout config section to change the default settings.
[idle_timeout]
#gcode:
	# A list of G-Code commands (one per line; subsequent lines
	# indented) to execute on an idle timeout. The default is to run
	# "TURN_OFF_HEATERS" and "M84".
#timeout: 600
timeout: 12000
	# Idle time (in seconds) to wait before running the above G-Code
	# commands. The default is 600 second

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# pid_kp = 74.791
#*# pid_ki = 1.826
#*# pid_kd = 765.673
#*# control = pid
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 19.063
#*# pid_ki = 1.125
#*# pid_kd = 80.778
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.126250, -0.053750, -0.013750, 0.007500, 0.011250, 0.013750, 0.020000
#*# 	-0.098750, -0.036250, 0.003750, 0.002500, 0.005000, -0.003750, 0.001250
#*# 	-0.066250, -0.016250, 0.001250, 0.002500, 0.000000, -0.008750, -0.017500
#*# 	-0.032500, -0.002500, -0.002500, 0.000000, -0.012500, -0.020000, -0.032500
#*# 	-0.017500, -0.001250, 0.010000, -0.001250, -0.016250, -0.028750, -0.060000
#*# 	-0.010000, 0.011250, 0.006250, -0.010000, -0.028750, -0.048750, -0.096250
#*# 	-0.003750, 0.015000, 0.007500, -0.010000, -0.032500, -0.063750, -0.125000
#*# tension = 0.2
#*# min_x = 8.0
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 4
#*# min_y = 30.0
#*# x_count = 7
#*# max_y = 201.0
#*# mesh_x_pps = 4
#*# max_x = 200.0
